//USING RELEVANT LIBRARIES
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;

/*CLASS DOCUMENTATION: This is the main form of the web application.
 * It consists of all the live functionalities of the project such as 
 * fetching, traversing back and forth, stopwatch etc. It opens on 
 * the default homepage. It also implements Properties for class instances.*/

//STARTING HERE
namespace CourseworkTrial3
{
    public partial class Form1 : Form
    {
        //TAB INSTANCES
        private static int tabCount = 0;
        RichTextBox richTextBox = new RichTextBox();

        //HOME PAGE INSTANCE
        private static string homepageURL;
        private static int xmlCount;

        //STACK INSTANCES
        private string[] ele;
        private int top;
        private int maxcount;

        //FOR FAVORITES
        public static string favURL;
        public static string historyURL;
        public static int flag = 0;

        //INITIALIZE THE TIMER FOR ELAPSED TIME
        System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer();

        //USE OF AUTOGENERATED PROPERTIES
        public static string HomepageURL { get => homepageURL; set => homepageURL = value; }
        public static int XmlCount { get => xmlCount; set => xmlCount = value; }

        //INITIALIZE THE MAIN WEB BROWSER PAGE
        public Form1()
        {
            InitializeComponent();
            
            button3.Enabled = false;                    //delete tab button is disabled in the beginning
            buttonBack.Enabled = false;                 //disable the back button as well

            //CREATE RICH TEXT BOX FOR THE CONTENT OF THE FIRST TAB
            tabControl1.SelectedTab.Controls.Add(richTextBox);
            ++tabCount;
            richTextBox.Width = 960;
            richTextBox.Height = 360;
            tabControl1.SelectedTab.Text = "Tab Page" + tabCount;
            
            //GET THE DEFAULT HOMEPAGE FROM THE FILE
            HomepageURL = File.ReadAllText("homepageURL.txt");

            //GET THE XMLCOUNT FROM THE FILE
            string xmlCountstr = File.ReadAllText("xmlCount.txt");
            XmlCount = Convert.ToInt32(xmlCountstr);
            
            //LOAD THE HOMEPAGE WHEN THE APPLICATION IS OPENED
            richTextBox.Text = fetch(HomepageURL);
            textBoxURL.Text = HomepageURL;
            buttonForward.Enabled = false;

            //BEGIN DATE AND TIME ON TOP LEFT CORNER LABEL
            labelDateAndTime.Text = DateTime.Now.ToString();
            timer1.Tick += new EventHandler(timer1_Tick);
            timer1.Interval = 1000;
            timer1.Enabled = true;
            backgroundWorker1.RunWorkerAsync();

            //INITIALIZE STACK INSTANCES
            int size = 100;
            ele = new string[size]; //Maximum size of History Stack. Will delete older values. 
            top = -1;
            maxcount = 1;

            //CALL FUNCTION TO BOLD THE SELECTED TAB
            tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
            tabControl1.DrawItem += new DrawItemEventHandler(tabControl1_DrawItem);
            
            //BEGIN CREATION OF XML HISTORY 
            createXmlHistory();
        }
        
        //LIVE TIMER
        private void timer1_Tick(object sender, EventArgs e)

        {
            labelDateAndTime.Text = DateTime.Now.ToString();
        }

        //WHEN SEARCH IS CLICKED
        private void buttonGo_Click(object sender, EventArgs e)
        {
            //ENABLE THE BACK BUTTON
            buttonBack.Enabled = true;
            string url = "";

            if (flag == 0)          //typed in URL textbox
            {
                url = textBoxURL.Text;
                richTextBox.Text = fetch(url);
            }
            else if(flag == 1)      //recieved from favorites
            { 
                textBoxURL.Text = favURL;
                richTextBox.Text = fetch(favURL);
                flag = 0;
            }
            else if(flag == 2)
            {
                textBoxURL.Text = historyURL;
                richTextBox.Text = fetch(historyURL);
                flag = 0;
            }

            historyPush(url, 0);    //0 means we are adding new history
            createXmlHistory();
        }

        //FETCH THE HTML PAGE OF THE URL
        public string fetch(string url)
        {
            string status = "";
            int length = url.Length;
            if (length < 5)
            {
                    status = "400 Bad Request. \n";
                    return status;
             }
            else if(url.Substring(0, 5) != "https")
            {
                status = "400 Bad Request. \n";
                return status;
            }
            
            //START TIMER FOR ELAPSED TIME
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            //GET HTML
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            
            //READ RESPONSE INTO STREAM
            StreamReader sr = new StreamReader(response.GetResponseStream());
            
            //GET STATUS CODE
            int statuscode = (int)response.StatusCode;
            if (statuscode.ToString().Equals("200"))
            {
                status = "200 OK!\n";
            }
            else if (statuscode.ToString().Equals("403"))
                status = "403 Forbidden. \n";
            else if (statuscode.ToString().Equals("404"))
                status = "404 Page Not Found. \n";

            //RETURN TO CALLER FUNCTION
            string returntext = status + "\n" + sr.ReadToEnd();
            sr.Close();
            
            //TIMER END
            stopWatch.Stop();
            TimeSpan ts = stopWatch.Elapsed;
            
            //PRINT ELAPSED TIME
            string elapsedTime = string.Format("{0:0}.{1:00}", ts.Seconds, ts.Milliseconds / 10);
            labelElapsedTime.Text = "Elapsed time for fetch " + elapsedTime + " seconds.";

            //RETURN THE FINAL TEXT TO SCREEN
            return returntext;
        }

        //RELOAD THE PAGE
        private void buttonReload_Click(object sender, EventArgs e)
        {
            //SLEEP TO SIMULATE REAL WORLD FETCH
            Thread.Sleep(100);

            //URL IS THE TEXT FROM SEARCH BAR
            string url = textBoxURL.Text;

            //IN CASE THE SEARCH BAR IS EMPTY
            if (string.IsNullOrEmpty(url))
            {
                richTextBox.Text = fetch(HomepageURL);
            }

            //ELSE
            richTextBox.Text = fetch(url);
        }

        //SETTINGS
        private void buttonSettings_Click(object sender, EventArgs e)
        {
            //INITIALIZE SETTINGS OBJECT
            Settings settingsobj = new Settings();
            settingsobj.ShowDialog();
        }

        //History Stack

        //PUSH FLAG 0 ==> NEW WEB SEARCH
        //PUSH FLAG 1 ==> TRAVERSE FORWARD
        public void historyPush(string url, int flag)           //GO FRONT
        {
                if (flag == 0)
                {
                    maxcount++;
                    buttonBack.Enabled = true;
                    buttonForward.Enabled = true;
                    ele[++top] = url;
                }
                if (flag == 1)
                {

                    richTextBox.Text = fetch(ele[++top]);
                    textBoxURL.Text = ele[++top];
                    if(++top == maxcount-1)                     //OVERFLOW CONDITION
                        buttonForward.Enabled = false;
                }
                //SET FLAG 1 UNLESS CALL FROM NEW WEB SEARCH
                flag = 1;   
        }

        //POP FUNCTION TO TRAVERSE BACK
        public void historyPop()                                //GO BACK
        {
            //UNDERFLOW CONDITION
            if (top == -1)                                      //UNDERFLOW
            {
                buttonBack.Enabled = false;
                richTextBox.Text = fetch(HomepageURL);
                textBoxURL.Text = HomepageURL;
            }
            //FETCH THE PREVIOUS ONE
            else
            {
                buttonBack.Enabled = true;
                buttonForward.Enabled = true;
                string url = ele[top--];
                richTextBox.Text = fetch(url);
                textBoxURL.Text = url;
            }
        }

        //CLICK ON BACK, CALL POP
        private void buttonBack_Click(object sender, EventArgs e)
        {
            historyPop();
        }
        
        //CLICK ON FRONT, CALL PUSH
        private void buttonForward_Click(object sender, EventArgs e)
        {
            historyPush("", 1);
        }

        //CREATE XML HISTORY FILE WITH EVERY SEARCH (NOT INCLUDING RELOAD)
        private void createXmlHistory()
        {
            //CHECK IF FILE EXISTS
            if (!File.Exists("myHistory.xml"))
            {
                //IF NOT, CREATE NEW FILE AND ADD FIRST ENTRY
                XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.NewLineOnAttributes = true;
                using (XmlWriter xmlWriter = XmlWriter.Create("myHistory.xml", xmlWriterSettings))
                {
                    xmlWriter.WriteStartDocument();
                    xmlWriter.WriteStartElement("History");

                    xmlWriter.WriteStartElement("Details");
                    xmlWriter.WriteElementString("Web_ID", XmlCount.ToString());
                    xmlWriter.WriteElementString("URL", textBoxURL.Text);
                    xmlWriter.WriteElementString("Date", DateTime.Today.ToString("dd-MM-yyyy"));
                    xmlWriter.WriteElementString("Time", DateTime.Now.ToString("HH:mm:ss"));
                    xmlWriter.WriteEndElement();

                    xmlWriter.WriteEndElement();
                    xmlWriter.WriteEndDocument();
                    xmlWriter.Flush();                  //clear the writer
                    xmlWriter.Close();                  //close the writer
                }
            }
            //OTHERWISE SET NEW ENTRY IN THE EXISTING FILE
            else
            {
                XDocument xDocument = XDocument.Load("myHistory.xml");
                XElement root = xDocument.Element("History");
                IEnumerable<XElement> rows = root.Descendants("Details");
                XElement firstRow = rows.First();
                firstRow.AddBeforeSelf(
                   new XElement("Details",
                   new XElement("Web_ID", XmlCount.ToString()),
                   new XElement("URL", textBoxURL.Text),
                   new XElement("Date", DateTime.Today.ToString("dd-MM-yyyy")),
                   new XElement("Time", DateTime.Now.ToString("HH:mm:ss"))));
                xDocument.Save("myHistory.xml");
            }

            //INCREMENT THE COUNT IN XML COUNT FILE
            XmlCount++;
            File.WriteAllText("xmlCount.txt", String.Empty);
            File.WriteAllText("xmlCount.txt", XmlCount.ToString());

        }

        //CLICK THE BUTTON TO ADD TO FAVORITES
        private void button1_Click(object sender, EventArgs e)              //Add to favorites
        {
            //INITIALIZE OBJECT OF ADD TO FAVORITES FORM
            AddToFavorites obj = new AddToFavorites();
            obj.ShowDialog();
        }

        //NOTHING HERE
        private void Form1_Load(object sender, EventArgs e)
        {
            //nothing here right now.
        }

        //CLICK THE BUTTON TO ADD NEW TAB
        private void button2_Click(object sender, EventArgs e)              //Add new tab
        {
            //INCREMENT TAB COUNT
            ++tabCount;
            
            //ENABLE BUTTON TO DELETE THE TABS
            button3.Enabled = true;

            //CREATE NEW TAB PAGE
            TabPage tpage = new TabPage();
            RichTextBox tab_richTextBox = new RichTextBox();
            tab_richTextBox.Width = 960;
            tab_richTextBox.Height = 360;
            tabControl1.TabPages.Add(tpage);

            //SET RELEVANT TAB NAME
            tpage.Text = "Tab Page" + tabCount;
            
            //ADD RICH TEXT BOX AS CONTENT TO THE SELECTED TAB
            tabControl1.SelectedTab = tpage;
            tabControl1.SelectedTab.Controls.Add(tab_richTextBox); 
            
            //FETCH HOMEPAGE URL AS THE NEW TAB IS LOADED
            tab_richTextBox.Text = fetch(HomepageURL);
        }

        //CLICK BUTTON TO DELETE SELECTED TAB
        private void button3_Click(object sender, EventArgs e)              //Delete a tab
        {
            //int tabCount = tabControl1.TabPages.Count;
            //DECREMENT THE TAB COUNT
            --tabCount;

            //REMOVE SELECTED TAB
            tabControl1.TabPages.Remove(tabControl1.SelectedTab);
            if (tabCount == 1)
            {
                //IF ONE TAB IS LEFT, DISABLE BUTTON. TO CLOSE, CLICK RED X ON TOP RIGHT CORNER.
                button3.Enabled = false;
            }
        }

        //USING THE DRAW ITEM FUNCTION OF THE C# TO BOLD SELECTED TAB
        void tabControl1_DrawItem(object sender, DrawItemEventArgs e)
        {
            //IF THE TAB IS SELECTED
            if (e.Index == tabControl1.SelectedIndex)
            {
                //EVERYTHING IS DEFAULT SETTING
                //EXCEPT TEXT STYLE IS BOLD
                e.Graphics.DrawString(tabControl1.TabPages[e.Index].Text,
                    new Font(tabControl1.Font, FontStyle.Bold),
                    Brushes.Black,
                    new PointF(e.Bounds.X + 3, e.Bounds.Y + 3));
            }
            else
            {
                //EVERYTHING IS DEFAULT SETTING
                e.Graphics.DrawString(tabControl1.TabPages[e.Index].Text,
                    tabControl1.Font,
                    Brushes.Black,
                    new PointF(e.Bounds.X + 3, e.Bounds.Y + 3));
            }
        }

        //BACKGROUND WORKER TO RUN LIVE TIME 
        private void backgroundWorker1_DoWork(object sender, 
            System.ComponentModel.DoWorkEventArgs e)
        {
            labelDateAndTime.Text = DateTime.Now.ToString();
            timer1.Tick += new EventHandler(timer1_Tick);
            timer1.Interval = 1000;
            timer1.Enabled = true;
        }
        //END OF FORM 1
    }
}
